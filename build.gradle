import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

import static org.apache.tools.ant.taskdefs.condition.Os.OS_NAME

apply plugin: 'java'

defineProperty("RETAIN_PACKAGER_TESTS", "true")
defineProperty("TEST_PACKAGER_DMG", "true")
defineProperty("FULL_TEST", "true")
ext.IS_MAC = OS_NAME.contains("mac") || OS_NAME.contains("darwin")
ext.IS_WINDOWS = OS_NAME.contains("windows")
ext.IS_LINUX = OS_NAME.contains("linux")
ext.PLATFORM = IS_MAC ? 'mac' : (IS_WINDOWS ? 'win' : 'linux')

project.ext.defaultModuleSourcePath = rootProject.projectDir.path + '/modules/*/src/main/java'

/**
 * If the given named property is not defined, then this method will define
 * it with the given defaultValue. Any properties defined by this method can
 * be substituted on the command line by using -P, or by specifying a
 * gradle.properties file in the user home dir
 *
 * @param name The name of the property to define
 * @param defaultValue The default value to assign the property
 */
void defineProperty(String name, String defaultValue) {
    if (!project.hasProperty(name)) {
        project.ext.set(name, defaultValue)
    }
}

project(":fxpackagerservices") {
    apply plugin: 'java'
    project.ext.buildModule = true
    project.ext.moduleName = "com.brcolow.packager.services"

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java']
            }
        }
    }

    project.ext.moduleSourcePath = defaultModuleSourcePath

    if (project.hasProperty("moduleName")) {
        project.ext.moduleDir = new File(project.sourceSets.main.java.outputDir, "${project.moduleName}")
    }
}

project(":fxpackager") {
    apply plugin: 'java'
    apply plugin: 'checkstyle'

    project.ext.buildModule = true
    project.ext.moduleName = "com.brcolow.javapackager"
    project.ext.moduleSourcePath = defaultModuleSourcePath

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java']
            }
        }
        test {
            java {
                srcDirs = ['src/test/java']
            }
            resources {
                srcDirs = ['src/test/resources', "$projectDir/build/tmp/tests/appResources"]
            }
        }
    }

    jar {
        from "$buildDir/generated-resources"
    }

    checkstyle {
        configFile = rootProject.file("gradle/checkstyle.xml")
        showViolations = true
        ignoreFailures = false
        toolVersion = "8.13"
        sourceSets = [project.sourceSets.main] // Only lint non-test sources for now.
    }

    // Decrease verbosity (printing of XSL style sheets, etc.)
    [checkstyleMain, checkstyleTest].each { task ->
        task.logging.setLevel(LogLevel.LIFECYCLE)
    }

    manifest {
        attributes(
                "Main-Class": "com.sun.openjfx.tools.packager.Main"
        )
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        compile "org.openjfx:javafx-base:11:${PLATFORM}"
        compile "org.openjfx:javafx-graphics:11:${PLATFORM}"
        compile "org.openjfx:javafx-controls:11:${PLATFORM}"
        compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.60'
        compile group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.60'
        testCompile group: "junit", name: "junit", version: "4.12"
        testCompile group: "com.github.stefanbirkner", name: "system-rules", "version": "1.18.0"
        testCompile group: 'org.apache.ant', name: 'ant', version: '1.10.5'
        testCompile project(":fxpackager")
    }

    compileJava {
        inputs.property("moduleName", moduleName)
        doFirst {
            options.compilerArgs = [
                    '-Xlint:deprecation',
                    '--module-path', classpath.asPath,
                    '--add-modules', 'javafx.controls',
                    '--add-modules', 'javafx.graphics',
                    "--add-exports=java.base/sun.security.timestamp=${project.ext.moduleName}",
                    "--add-exports=java.base/sun.security.x509=${project.ext.moduleName}",
                    "--add-exports=java.base/sun.security.pkcs=${project.ext.moduleName}",
                    "--add-exports=jdk.jlink/jdk.tools.jlink.internal.packager=${project.ext.moduleName}",
                    "--add-exports=java.logging/java.util.logging=${project.ext.moduleName}",
            ]
            classpath = files()
        }
        options.encoding = 'UTF-8'
    }

    task setupPackagerFakeJar(type: Copy) {
        from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/linux/javalogo_white_48.png"
        from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/mac/GenericAppHiDPI.icns"
        from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/windows/javalogo_white_48.ico"
        from "$projectDir/src/test/resources/hello/java-logo2.gif"
        from "$projectDir/src/test/resources/hello/small.ico"
        from "$projectDir/src/test/resources/hello/test.icns"
        from "$projectDir/src/test/resources/hello/LICENSE-RTF.rtf"
        into project.file("$projectDir/build/tmp/tests/appResources")
    }

    task packagerFakeJar(type: Jar, dependsOn: [setupPackagerFakeJar]) {
        dependsOn compileTestJava
        from compileTestJava.destinationDir
        include "hello/**"

        destinationDir project.file("build/tmp/tests/appResources")
        archiveName "mainApp.jar"

        manifest {
            attributes(
                    "Main-Class": "hello.HelloRectangle",
                    "Custom-Attribute": " Is it stripped?"
            )
        }

        doFirst {
            copy {
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/linux/javalogo_white_16.png"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/linux/javalogo_white_32.png"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/linux/javalogo_white_48.png"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/mac/GenericAppHiDPI.icns"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/windows/javalogo_white_48.ico"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/linux/template.control"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/linux/template.copyright"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/linux/template.deb.init.script"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/linux/template.desktop"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/linux/template.postinst"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/linux/template.postrm"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/linux/template.preinst"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/linux/template.prerm"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/linux/template.rpm.init.script"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/linux/template.spec"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/mac/background_dmg.png"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/mac/background_pkg.png"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/mac/DMGsetup.scpt"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/mac/GenericApp.icns"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/mac/GenericAppHiDPI.icns"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/mac/Info.plist.template"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/mac/Info-lite.plist.template"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/mac/launchd.plist.template"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/mac/lic_template.plist"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/mac/MacAppStore.entitlements"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/mac/MacAppStore_Inherit.entitlements"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/mac/postinstall.template"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/mac/preinstall.template"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/mac/Runtime-Info.plist.template"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/windows/icon_inno_setup.bmp"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/windows/javalogo_white_16.ico"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/windows/javalogo_white_32.ico"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/windows/javalogo_white_48.ico"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/windows/template.iss"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/windows/template.wxs"
                from "$projectDir/src/main/resources/com/sun/openjfx/tools/packager/windows/WinLauncher.properties"
                from "$projectDir/src/test/resources/hello/java-logo2.gif"
                from "$projectDir/src/test/resources/hello/small.ico"
                from "$projectDir/src/test/resources/hello/test.icns"
                from "$projectDir/src/test/resources/hello/LICENSE-RTF.rtf"
                from "$projectDir/../../LICENSE"
                into project.file("$projectDir/build/tmp/tests/appResources")
            }
            copy {
                from "$projectDir/../../LICENSE"
                into project.file("$projectDir/build/tmp/tests/appResources")
                rename '(.*)LICENSE', '$1LICENSE2'
            }
        }
    }

    task packagerFXPackagedJar(type: Jar) {
        dependsOn packagerFakeJar
        from compileTestJava.destinationDir
        include "hello/**"

        destinationDir project.file("build/tmp/tests/appResources")
        archiveName "packagedMainApp.jar"

        manifest {
            attributes(
                    "JavaFX-Application-Class": "hello.TestPackager",
            )
        }
    }

    compileTestJava {
        exclude "hello/**"
        inputs.property("moduleName", project.ext.moduleName)
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath,
                    '--add-modules', 'junit',
                    '--add-reads', "${project.ext.moduleName}=junit",
                    "--add-exports", "jdk.jlink/jdk.tools.jlink.internal.packager=${project.ext.moduleName}",
                    '--patch-module', "${project.ext.moduleName}=" + files(sourceSets.test.java.srcDirs).asPath,
            ]
            classpath = files()
        }
        options.encoding = 'UTF-8'
    }

    test {
        inputs.property("moduleName", project.ext.moduleName)
        doFirst {
            jvmArgs = [
                    '--module-path', classpath.asPath,
                    "--add-exports", "java.base/sun.security.timestamp=${project.ext.moduleName}",
                    "--add-exports", "java.base/sun.security.x509=${project.ext.moduleName}",
                    "--add-exports", "java.base/sun.security.pkcs=${project.ext.moduleName}",
                    '--add-exports', "${project.ext.moduleName}/com.sun.openjfx.tools.packager.windows=junit",
                    '--add-exports', "${project.ext.moduleName}/com.sun.openjfx.tools.packager.mac=junit",
                    '--add-exports', "${project.ext.moduleName}/com.sun.openjfx.tools.packager.linux=junit",
                    '--add-exports', "jdk.jlink/jdk.tools.jlink.internal.packager=${project.ext.moduleName}",
                    '--add-modules', 'ALL-MODULE-PATH',
                    '--add-reads', "${project.ext.moduleName}=junit",
                    '--add-reads', "${project.ext.moduleName}=system.rules",
                    '--patch-module', "${project.ext.moduleName}=" + files(sourceSets.test.java.outputDir).asPath,
            ]
            classpath = files()
        }
        enableAssertions = true
        scanForTestClasses = false
        include("**/*Test.*")
        exclude("**/test/java/hello/*.java")
        testLogging {
            events TestLogEvent.STARTED, TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED, TestLogEvent.FAILED,
                    TestLogEvent.STANDARD_OUT, TestLogEvent.STANDARD_ERROR
            showExceptions true
            exceptionFormat TestExceptionFormat.FULL
            showCauses true
            showStackTraces true

            info.events = debug.events
            def failedTestSummary = "\n\nFAILED TESTS SUMMARY: \n\n"
            afterTest { desc, result ->
                if (desc.parent) {
                    if (result.getResultType() == TestResult.ResultType.FAILURE) {
                        failedTestSummary += "${desc.getClassName()}#${desc.getName()} FAILED:\n" +
                                "${result.getExceptions()}\n"
                    }
                }
            }
            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, " +
                            "${result.successfulTestCount} successes, " +
                            "${result.failedTestCount} failures, " +
                            "${result.skippedTestCount} skipped)"
                    def startItem = '|  ', endItem = '  |'
                    def repeat = startItem + output + endItem
                    println('\n' + ('-' * repeat.length()) + '\n' + repeat + '\n' + ('-' * repeat.length()))
                    if (result.failedTestCount > 0) {
                        println(failedTestSummary)
                    }
                }
            }
        }

        dependsOn packagerFXPackagedJar
        systemProperty "RETAIN_PACKAGER_TESTS", RETAIN_PACKAGER_TESTS
        systemProperty "TEST_PACKAGER_DMG", TEST_PACKAGER_DMG
        systemProperty "FULL_TEST", FULL_TEST
    }
}
